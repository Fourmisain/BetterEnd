plugins {
	id 'fabric-loom' version '0.7-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def env = System.getenv()

repositories {
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "http://server.bbkr.space:8081/artifactory/libs-release/" }
	maven { url "https://maven.fabricmc.net/" }
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url 'https://jitpack.io' }

}

apply plugin: 'maven'

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings minecraft.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	useApi "vazkii.patchouli:Patchouli:1.16.4-${project.patchouli_version}"
	useApi "com.github.paulevsGitch:BCLib:main-SNAPSHOT"
	
	useOptional "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"
	useOptional "me.shedaniel:RoughlyEnoughItems-api:${project.rei_version}"
	//useOptional "grondag:canvas-mc116:${project.canvas_version}"
}

def useOptional(String dep) {
	dependencies.modRuntime (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "net.fabricmc"
		if (!dep.contains("me.shedaniel")) {
			exclude group: "me.shedaniel"
		}
	}
	dependencies.modCompileOnly (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "net.fabricmc"
		if (!dep.contains("me.shedaniel")) {
			exclude group: "me.shedaniel"
		}
	}
}

def useApi(String dep) {
	dependencies.modApi (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "net.fabricmc"
		if (!dep.contains("me.shedaniel")) {
			exclude group: "me.shedaniel"
		}
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
